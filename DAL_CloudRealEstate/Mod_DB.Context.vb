'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class Cloud_RealEstateEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=Cloud_RealEstateEntities")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property Online_Groups() As DbSet(Of Online_Groups)
    Public Overridable Property Online_Menu() As DbSet(Of Online_Menu)
    Public Overridable Property Online_User() As DbSet(Of Online_User)

    <DbFunction("Cloud_RealEstateEntities", "fn_CityMain_select")>
    Public Overridable Function fn_CityMain_select(region_Id As Nullable(Of Integer), company_Id As Nullable(Of Integer)) As IQueryable(Of fn_CityMain_select_Result)
        Dim region_IdParameter As ObjectParameter = If(region_Id.HasValue, New ObjectParameter("Region_Id", region_Id), New ObjectParameter("Region_Id", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_CityMain_select_Result)("[Cloud_RealEstateEntities].[fn_CityMain_select](@Region_Id, @Company_Id)", region_IdParameter, company_IdParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_CountryMain_Select")>
    Public Overridable Function fn_CountryMain_Select() As IQueryable(Of fn_CountryMain_Select_Result)
         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_CountryMain_Select_Result)("[Cloud_RealEstateEntities].[fn_CountryMain_Select]()")
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_Region_select")>
    Public Overridable Function fn_Region_select(country_Code As String, company_Id As Nullable(Of Integer)) As IQueryable(Of fn_Region_select_Result)
        Dim country_CodeParameter As ObjectParameter = If(country_Code IsNot Nothing, New ObjectParameter("Country_Code", country_Code), New ObjectParameter("Country_Code", GetType(String)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_Region_select_Result)("[Cloud_RealEstateEntities].[fn_Region_select](@Country_Code, @Company_Id)", country_CodeParameter, company_IdParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Project_Type")>
    Public Overridable Function fn_tbl_Project_Type() As IQueryable(Of fn_tbl_Project_Type_Result)
         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Project_Type_Result)("[Cloud_RealEstateEntities].[fn_tbl_Project_Type]()")
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Project_Type_Option_Select")>
    Public Overridable Function fn_tbl_Project_Type_Option_Select(company_Id As Nullable(Of Integer), project_TypeId As Nullable(Of Integer)) As IQueryable(Of fn_tbl_Project_Type_Option_Select_Result)
        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_TypeIdParameter As ObjectParameter = If(project_TypeId.HasValue, New ObjectParameter("Project_TypeId", project_TypeId), New ObjectParameter("Project_TypeId", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Project_Type_Option_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_Project_Type_Option_Select](@Company_Id, @Project_TypeId)", company_IdParameter, project_TypeIdParameter)
    End Function

    Public Overridable Function sp_tbl_Owner_CompanyProject_InsertUpdateDelete(oCompany_IdPj As Nullable(Of Integer), company_Id As Nullable(Of Integer), oCompanyCode As String, oCompanyName As String, oCompanyWeb As String, oCompanyEmail As String, oCompanyTel As String, oCompanyMobile As String, oCompanyAddress As String, gLAccountNo As String, active As Nullable(Of Boolean), user_Id As Nullable(Of Integer), computer_name As String, oCompany_IdPj_out As ObjectParameter, vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim oCompany_IdPjParameter As ObjectParameter = If(oCompany_IdPj.HasValue, New ObjectParameter("OCompany_IdPj", oCompany_IdPj), New ObjectParameter("OCompany_IdPj", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim oCompanyCodeParameter As ObjectParameter = If(oCompanyCode IsNot Nothing, New ObjectParameter("OCompanyCode", oCompanyCode), New ObjectParameter("OCompanyCode", GetType(String)))

        Dim oCompanyNameParameter As ObjectParameter = If(oCompanyName IsNot Nothing, New ObjectParameter("OCompanyName", oCompanyName), New ObjectParameter("OCompanyName", GetType(String)))

        Dim oCompanyWebParameter As ObjectParameter = If(oCompanyWeb IsNot Nothing, New ObjectParameter("OCompanyWeb", oCompanyWeb), New ObjectParameter("OCompanyWeb", GetType(String)))

        Dim oCompanyEmailParameter As ObjectParameter = If(oCompanyEmail IsNot Nothing, New ObjectParameter("OCompanyEmail", oCompanyEmail), New ObjectParameter("OCompanyEmail", GetType(String)))

        Dim oCompanyTelParameter As ObjectParameter = If(oCompanyTel IsNot Nothing, New ObjectParameter("OCompanyTel", oCompanyTel), New ObjectParameter("OCompanyTel", GetType(String)))

        Dim oCompanyMobileParameter As ObjectParameter = If(oCompanyMobile IsNot Nothing, New ObjectParameter("OCompanyMobile", oCompanyMobile), New ObjectParameter("OCompanyMobile", GetType(String)))

        Dim oCompanyAddressParameter As ObjectParameter = If(oCompanyAddress IsNot Nothing, New ObjectParameter("OCompanyAddress", oCompanyAddress), New ObjectParameter("OCompanyAddress", GetType(String)))

        Dim gLAccountNoParameter As ObjectParameter = If(gLAccountNo IsNot Nothing, New ObjectParameter("GLAccountNo", gLAccountNo), New ObjectParameter("GLAccountNo", GetType(String)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Boolean)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_tbl_Owner_CompanyProject_InsertUpdateDelete", oCompany_IdPjParameter, company_IdParameter, oCompanyCodeParameter, oCompanyNameParameter, oCompanyWebParameter, oCompanyEmailParameter, oCompanyTelParameter, oCompanyMobileParameter, oCompanyAddressParameter, gLAccountNoParameter, activeParameter, user_IdParameter, computer_nameParameter, oCompany_IdPj_out, vald, [error])
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function sp_tbl_Project_Main_InsertUpdateDelete(project_Id As Nullable(Of Integer), company_Id As Nullable(Of Integer), project_Code As String, project_Name As String, address As String, country_Id As String, city_id As Nullable(Of Integer), region_Id As Nullable(Of Integer), zone_Id As Nullable(Of Integer), oCompany_IdPj As Nullable(Of Integer), project_TypeId As Nullable(Of Integer), description As String, location_lat_long As String, lat As String, [long] As String, active As Nullable(Of Boolean), user_Id As Nullable(Of Integer), computer_name As String, project_IdOut As ObjectParameter, vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_CodeParameter As ObjectParameter = If(project_Code IsNot Nothing, New ObjectParameter("Project_Code", project_Code), New ObjectParameter("Project_Code", GetType(String)))

        Dim project_NameParameter As ObjectParameter = If(project_Name IsNot Nothing, New ObjectParameter("Project_Name", project_Name), New ObjectParameter("Project_Name", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim country_IdParameter As ObjectParameter = If(country_Id IsNot Nothing, New ObjectParameter("Country_Id", country_Id), New ObjectParameter("Country_Id", GetType(String)))

        Dim city_idParameter As ObjectParameter = If(city_id.HasValue, New ObjectParameter("City_id", city_id), New ObjectParameter("City_id", GetType(Integer)))

        Dim region_IdParameter As ObjectParameter = If(region_Id.HasValue, New ObjectParameter("Region_Id", region_Id), New ObjectParameter("Region_Id", GetType(Integer)))

        Dim zone_IdParameter As ObjectParameter = If(zone_Id.HasValue, New ObjectParameter("Zone_Id", zone_Id), New ObjectParameter("Zone_Id", GetType(Integer)))

        Dim oCompany_IdPjParameter As ObjectParameter = If(oCompany_IdPj.HasValue, New ObjectParameter("OCompany_IdPj", oCompany_IdPj), New ObjectParameter("OCompany_IdPj", GetType(Integer)))

        Dim project_TypeIdParameter As ObjectParameter = If(project_TypeId.HasValue, New ObjectParameter("Project_TypeId", project_TypeId), New ObjectParameter("Project_TypeId", GetType(Integer)))

        Dim descriptionParameter As ObjectParameter = If(description IsNot Nothing, New ObjectParameter("Description", description), New ObjectParameter("Description", GetType(String)))

        Dim location_lat_longParameter As ObjectParameter = If(location_lat_long IsNot Nothing, New ObjectParameter("location_lat_long", location_lat_long), New ObjectParameter("location_lat_long", GetType(String)))

        Dim latParameter As ObjectParameter = If(lat IsNot Nothing, New ObjectParameter("lat", lat), New ObjectParameter("lat", GetType(String)))

        Dim longParameter As ObjectParameter = If([long] IsNot Nothing, New ObjectParameter("long", [long]), New ObjectParameter("long", GetType(String)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Boolean)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_tbl_Project_Main_InsertUpdateDelete", project_IdParameter, company_IdParameter, project_CodeParameter, project_NameParameter, addressParameter, country_IdParameter, city_idParameter, region_IdParameter, zone_IdParameter, oCompany_IdPjParameter, project_TypeIdParameter, descriptionParameter, location_lat_longParameter, latParameter, longParameter, activeParameter, user_IdParameter, computer_nameParameter, project_IdOut, vald, [error])
    End Function

    Public Overridable Function sp_tbl_Project_Sub_InsertUpdateDelete(project_IdSub As Nullable(Of Decimal), project_Id As Nullable(Of Integer), company_Id As Nullable(Of Integer), project_Type_OptionId As Nullable(Of Integer), totalUnitUsed As Nullable(Of Integer), applyManage As Nullable(Of Boolean), computer_name As String, notes As String, user_Id As Nullable(Of Integer), active As Nullable(Of Boolean), project_IdSub_Out As ObjectParameter, vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim project_IdSubParameter As ObjectParameter = If(project_IdSub.HasValue, New ObjectParameter("Project_IdSub", project_IdSub), New ObjectParameter("Project_IdSub", GetType(Decimal)))

        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_Type_OptionIdParameter As ObjectParameter = If(project_Type_OptionId.HasValue, New ObjectParameter("Project_Type_OptionId", project_Type_OptionId), New ObjectParameter("Project_Type_OptionId", GetType(Integer)))

        Dim totalUnitUsedParameter As ObjectParameter = If(totalUnitUsed.HasValue, New ObjectParameter("TotalUnitUsed", totalUnitUsed), New ObjectParameter("TotalUnitUsed", GetType(Integer)))

        Dim applyManageParameter As ObjectParameter = If(applyManage.HasValue, New ObjectParameter("ApplyManage", applyManage), New ObjectParameter("ApplyManage", GetType(Boolean)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Dim notesParameter As ObjectParameter = If(notes IsNot Nothing, New ObjectParameter("Notes", notes), New ObjectParameter("Notes", GetType(String)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_tbl_Project_Sub_InsertUpdateDelete", project_IdSubParameter, project_IdParameter, company_IdParameter, project_Type_OptionIdParameter, totalUnitUsedParameter, applyManageParameter, computer_nameParameter, notesParameter, user_IdParameter, activeParameter, project_IdSub_Out, vald, [error])
    End Function

    Public Overridable Function sp_tbl_ProjectBuilding_InsertUpdateDelete(pj_BuildingId As Nullable(Of Integer), company_Id As Nullable(Of Integer), project_Id As Nullable(Of Integer), tbl_buildCatId As Nullable(Of Integer), typeBuildingId As Nullable(Of Integer), project_IdSub As Nullable(Of Decimal), buildingCode As String, buildingName As String, floorNo As Nullable(Of Integer), active As Nullable(Of Boolean), user_Id As Nullable(Of Integer), computer_name As String, pj_BuildingId_out As ObjectParameter, vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim pj_BuildingIdParameter As ObjectParameter = If(pj_BuildingId.HasValue, New ObjectParameter("Pj_BuildingId", pj_BuildingId), New ObjectParameter("Pj_BuildingId", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim tbl_buildCatIdParameter As ObjectParameter = If(tbl_buildCatId.HasValue, New ObjectParameter("tbl_buildCatId", tbl_buildCatId), New ObjectParameter("tbl_buildCatId", GetType(Integer)))

        Dim typeBuildingIdParameter As ObjectParameter = If(typeBuildingId.HasValue, New ObjectParameter("TypeBuildingId", typeBuildingId), New ObjectParameter("TypeBuildingId", GetType(Integer)))

        Dim project_IdSubParameter As ObjectParameter = If(project_IdSub.HasValue, New ObjectParameter("Project_IdSub", project_IdSub), New ObjectParameter("Project_IdSub", GetType(Decimal)))

        Dim buildingCodeParameter As ObjectParameter = If(buildingCode IsNot Nothing, New ObjectParameter("BuildingCode", buildingCode), New ObjectParameter("BuildingCode", GetType(String)))

        Dim buildingNameParameter As ObjectParameter = If(buildingName IsNot Nothing, New ObjectParameter("BuildingName", buildingName), New ObjectParameter("BuildingName", GetType(String)))

        Dim floorNoParameter As ObjectParameter = If(floorNo.HasValue, New ObjectParameter("FloorNo", floorNo), New ObjectParameter("FloorNo", GetType(Integer)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Boolean)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_tbl_ProjectBuilding_InsertUpdateDelete", pj_BuildingIdParameter, company_IdParameter, project_IdParameter, tbl_buildCatIdParameter, typeBuildingIdParameter, project_IdSubParameter, buildingCodeParameter, buildingNameParameter, floorNoParameter, activeParameter, user_IdParameter, computer_nameParameter, pj_BuildingId_out, vald, [error])
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

    Public Overridable Function spo_tbl_Project_Type_Option_InsertUpdateDelete(project_Type_OptionId As Nullable(Of Integer), project_TypeId As Nullable(Of Integer), company_Id As Nullable(Of Integer), projectOption_Code As String, projectOption_Name As String, projectOption_Description As String, active As Nullable(Of Boolean), user_Id As Nullable(Of Integer), computer_name As String, project_Type_OptionId_out As ObjectParameter, vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim project_Type_OptionIdParameter As ObjectParameter = If(project_Type_OptionId.HasValue, New ObjectParameter("Project_Type_OptionId", project_Type_OptionId), New ObjectParameter("Project_Type_OptionId", GetType(Integer)))

        Dim project_TypeIdParameter As ObjectParameter = If(project_TypeId.HasValue, New ObjectParameter("Project_TypeId", project_TypeId), New ObjectParameter("Project_TypeId", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim projectOption_CodeParameter As ObjectParameter = If(projectOption_Code IsNot Nothing, New ObjectParameter("ProjectOption_Code", projectOption_Code), New ObjectParameter("ProjectOption_Code", GetType(String)))

        Dim projectOption_NameParameter As ObjectParameter = If(projectOption_Name IsNot Nothing, New ObjectParameter("ProjectOption_Name", projectOption_Name), New ObjectParameter("ProjectOption_Name", GetType(String)))

        Dim projectOption_DescriptionParameter As ObjectParameter = If(projectOption_Description IsNot Nothing, New ObjectParameter("ProjectOption_Description", projectOption_Description), New ObjectParameter("ProjectOption_Description", GetType(String)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Boolean)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spo_tbl_Project_Type_Option_InsertUpdateDelete", project_Type_OptionIdParameter, project_TypeIdParameter, company_IdParameter, projectOption_CodeParameter, projectOption_NameParameter, projectOption_DescriptionParameter, activeParameter, user_IdParameter, computer_nameParameter, project_Type_OptionId_out, vald, [error])
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Owner_CompanyProject_Select")>
    Public Overridable Function fn_tbl_Owner_CompanyProject_Select(company_Id As Nullable(Of Integer), active As Nullable(Of Integer)) As IQueryable(Of fn_tbl_Owner_CompanyProject_Select_Result)
        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Owner_CompanyProject_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_Owner_CompanyProject_Select](@Company_Id, @Active)", company_IdParameter, activeParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Project_Gallery_Select")>
    Public Overridable Function fn_tbl_Project_Gallery_Select(project_Id As Nullable(Of Integer), company_Id As Nullable(Of Integer), relation_Id As Nullable(Of Integer)) As IQueryable(Of fn_tbl_Project_Gallery_Select_Result)
        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim relation_IdParameter As ObjectParameter = If(relation_Id.HasValue, New ObjectParameter("Relation_Id", relation_Id), New ObjectParameter("Relation_Id", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Project_Gallery_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_Project_Gallery_Select](@Project_Id, @Company_Id, @Relation_Id)", project_IdParameter, company_IdParameter, relation_IdParameter)
    End Function

    Public Overridable Function sp_tbl_Project_Gallery_InsertUpdate(pj_Gallery_Id As Nullable(Of Integer), project_Id As Nullable(Of Integer), company_Id As Nullable(Of Integer), pj_img_Code As String, pj_img_path As String, relation_Id As Nullable(Of Integer), alt_Image As String, description_Image As String, user_Id As Nullable(Of Integer), computer_name As String, pj_Gallery_Id_out As ObjectParameter, active As Nullable(Of Integer), vald As ObjectParameter, [error] As ObjectParameter) As Integer
        Dim pj_Gallery_IdParameter As ObjectParameter = If(pj_Gallery_Id.HasValue, New ObjectParameter("Pj_Gallery_Id", pj_Gallery_Id), New ObjectParameter("Pj_Gallery_Id", GetType(Integer)))

        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim pj_img_CodeParameter As ObjectParameter = If(pj_img_Code IsNot Nothing, New ObjectParameter("Pj_img_Code", pj_img_Code), New ObjectParameter("Pj_img_Code", GetType(String)))

        Dim pj_img_pathParameter As ObjectParameter = If(pj_img_path IsNot Nothing, New ObjectParameter("Pj_img_path", pj_img_path), New ObjectParameter("Pj_img_path", GetType(String)))

        Dim relation_IdParameter As ObjectParameter = If(relation_Id.HasValue, New ObjectParameter("Relation_Id", relation_Id), New ObjectParameter("Relation_Id", GetType(Integer)))

        Dim alt_ImageParameter As ObjectParameter = If(alt_Image IsNot Nothing, New ObjectParameter("alt_Image", alt_Image), New ObjectParameter("alt_Image", GetType(String)))

        Dim description_ImageParameter As ObjectParameter = If(description_Image IsNot Nothing, New ObjectParameter("Description_Image", description_Image), New ObjectParameter("Description_Image", GetType(String)))

        Dim user_IdParameter As ObjectParameter = If(user_Id.HasValue, New ObjectParameter("User_Id", user_Id), New ObjectParameter("User_Id", GetType(Integer)))

        Dim computer_nameParameter As ObjectParameter = If(computer_name IsNot Nothing, New ObjectParameter("Computer_name", computer_name), New ObjectParameter("Computer_name", GetType(String)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_tbl_Project_Gallery_InsertUpdate", pj_Gallery_IdParameter, project_IdParameter, company_IdParameter, pj_img_CodeParameter, pj_img_pathParameter, relation_IdParameter, alt_ImageParameter, description_ImageParameter, user_IdParameter, computer_nameParameter, pj_Gallery_Id_out, activeParameter, vald, [error])
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Project_Main_Select")>
    Public Overridable Function fn_tbl_Project_Main_Select(company_Id As Nullable(Of Integer)) As IQueryable(Of fn_tbl_Project_Main_Select_Result)
        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Project_Main_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_Project_Main_Select](@Company_Id)", company_IdParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_Project_Sub_Select")>
    Public Overridable Function fn_tbl_Project_Sub_Select(company_Id As Nullable(Of Integer), project_Id As Nullable(Of Integer)) As IQueryable(Of fn_tbl_Project_Sub_Select_Result)
        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_Project_Sub_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_Project_Sub_Select](@Company_Id, @Project_Id)", company_IdParameter, project_IdParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_ProjectBuilding_Select")>
    Public Overridable Function fn_tbl_ProjectBuilding_Select(company_Id As Nullable(Of Integer), project_Id As Nullable(Of Integer), active As Nullable(Of Integer)) As IQueryable(Of fn_tbl_ProjectBuilding_Select_Result)
        Dim company_IdParameter As ObjectParameter = If(company_Id.HasValue, New ObjectParameter("Company_Id", company_Id), New ObjectParameter("Company_Id", GetType(Integer)))

        Dim project_IdParameter As ObjectParameter = If(project_Id.HasValue, New ObjectParameter("Project_Id", project_Id), New ObjectParameter("Project_Id", GetType(Integer)))

        Dim activeParameter As ObjectParameter = If(active.HasValue, New ObjectParameter("Active", active), New ObjectParameter("Active", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_ProjectBuilding_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_ProjectBuilding_Select](@Company_Id, @Project_Id, @Active)", company_IdParameter, project_IdParameter, activeParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_TypeBuilding_Select")>
    Public Overridable Function fn_tbl_TypeBuilding_Select(tbl_buildCatId As Nullable(Of Integer)) As IQueryable(Of fn_tbl_TypeBuilding_Select_Result)
        Dim tbl_buildCatIdParameter As ObjectParameter = If(tbl_buildCatId.HasValue, New ObjectParameter("tbl_buildCatId", tbl_buildCatId), New ObjectParameter("tbl_buildCatId", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_TypeBuilding_Select_Result)("[Cloud_RealEstateEntities].[fn_tbl_TypeBuilding_Select](@tbl_buildCatId)", tbl_buildCatIdParameter)
    End Function

    <DbFunction("Cloud_RealEstateEntities", "fn_tbl_TypeBuildingCategorySelect")>
    Public Overridable Function fn_tbl_TypeBuildingCategorySelect() As IQueryable(Of fn_tbl_TypeBuildingCategorySelect_Result)
         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fn_tbl_TypeBuildingCategorySelect_Result)("[Cloud_RealEstateEntities].[fn_tbl_TypeBuildingCategorySelect]()")
    End Function

End Class
