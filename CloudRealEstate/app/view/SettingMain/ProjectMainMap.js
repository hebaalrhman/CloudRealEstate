/*
 * File: app/view/SettingMain/ProjectMainMap.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

var ClickEventHandler = function(map, origin) {
    this.origin = origin;
    this.map = map;
    this.placesService = new google.maps.places.PlacesService(map);
    // Listen for clicks on the map.
    this.map.addListener('click', this.handleClick.bind(this));
};
ClickEventHandler.prototype.handleClick = function(event) {
    console.log('You clicked on: ' + event.latLng);
    // If the event has a placeId, use it.
    if (event.placeId) {
        console.log('You clicked on place:' + event.placeId);

        // Calling e.stop() on the event prevents the default info window from
        // showing.
        // If you call stop here when there is no placeId you will prevent some
        // other map click event handlers from receiving the event.
        event.stop();

        this.getPlaceInformation(event.placeId);
    }
};
ClickEventHandler.prototype.getPlaceInformation = function(placeId) {
    var me = this;
    this.placesService.getDetails({placeId: placeId}, function(place, status) {
        if (status === 'OK') {
            console.log(place)
        }


    });

};
Ext.define('CloudRealEstate.view.SettingMain.ProjectMainMap', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.projectmainMap',


    initComponent: function() {
        var me = this;
        me.config2(me);
        me.callParent(arguments);
    },

    config2: function(config) {
       // console.log(config);
        Ext.applyIf(config,{
            plain:true,
            gmapType:'map',
            border:false
        });
    },

    createMap: function(center, marker) {

       // console.log(center);
       // console.log(marker);
        var options=Ext.apply({},this.mapOptions);
        options = Ext.applyIf(options, {
            zoom: 14,
            center: center,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        this.gmap = new google.maps.Map(this.body.dom, options);
        navigator.geolocation.getCurrentPosition(function(position){
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

               console.log('pos');
               console.log(pos);
        });

        if (marker) {

            this.addMarker(Ext.applyIf(marker, {
                position: center
            }));
        }


        Ext.each(this.markers, this.addMarker, this);
        this.fireEvent('mapready', this, this.gmap);
    //    var clickHandler = new ClickEventHandler(this.gmap, options);

    },

    createMap2: function(center, marker) {
        var options=Ext.apply({},this.mapOptions);
        options = Ext.applyIf(options, {
            zoom: 14,
            center: center,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        this.gmap = new google.maps.Map(this.body.dom, options);
        if (marker) {
            this.addMarker(Ext.applyIf(marker, {
                position: center
            }));
        }


        Ext.each(this.markers, this.addMarker, this);
        this.fireEvent('mapready', this, this.gmap);

    },

    addMarker: function(marker) {
        //   console.log(marker);
        marker = Ext.apply({
            map: this.gmap
        }, marker);

        if (!marker.position) {
            marker.position = new google.maps.LatLng(marker.lat, marker.lng);
        }
        var o =  new google.maps.Marker(marker);
        Ext.Object.each(marker.listeners, function(name, fn){
            google.maps.event.addListener(o, name, fn);
        });
        return o;
    },

    lookupCode: function(addr, marker) {
        this.geocoder = new google.maps.Geocoder();
        this.geocoder.geocode({
            address: addr
        }, Ext.Function.bind(this.onLookupComplete, this, [marker], true));
    },

    onLookupComplete: function(data, response, marker) {
        if (response != 'OK') {
            Ext.MessageBox.alert('Error', 'An error occured: "' + response + '"');
            return;
        }
        this.createMap(data[0].geometry.location, marker);
    },

    afterComponentLayout: function(w, h) {
        this.callParent(arguments);
        this.redraw();
    },

    redraw: function() {
        var map = this.gmap;
        if (map) {
            google.maps.event.trigger(map, 'resize');
        }
    },

    afterFirstLayout: function() {
        var center =this.center;
        this.callParent();
        if (center) {
            if (center.geoCodeAddr) {
                this.lookupCode(center.geoCodeAddr, center.marker);
            }
            else {
                this.createMap(center);
            }
        }else {
            Ext.Error.raise('center is required');
        }
    },

    setCenter: function(center) {
        //    console.log("center center center center center center ");
        //   console.log(center);

        if (center) {
            console.log("LOLOLOLO");
            if (center.geoCodeAddr) {
                // console.log("SOSOSOSOS");
                this.lookupCode(center.geoCodeAddr, center.marker);
            }
        }
    },

    FindMe: function() {
        var me=this;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position){

                    //  console.log(position);


                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    me.createMap2(pos,pos);

                }


            );}
    },

    FindLocation: function(pos) {
        var me =this;

        if (pos){me.createMap2(pos,pos);}

    }

});