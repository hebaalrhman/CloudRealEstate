/*
 * File: app/controller/SettingMain/ProjectMain.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CloudRealEstate.controller.SettingMain.ProjectMain', {
    extend: 'Ext.app.Controller',
    stores: [
        'SettingMain.ProjectMain',
        'SettingMain.ProjectGallery',
        'SettingMain.ProjectTypeOption',
        'SettingMain.ProjectSub'
    ],
    views: [
        'SettingMain.ProjectMain'
    ],

    refs: [
        {
            ref: 'frmMain',
            selector: 'projectmain projectmainHdr projectmaindetails'
        },
        {
            ref: 'pupMap',
            selector: 'projectmain projectmainMap'
        },

        {
            ref:'projectMainGrd',
            selector:'projectmain projectmainHdr projectmainGrd gridpanel'
        },
        {
            ref:'cmbCountryMain',
            selector: 'projectmain projectmainHdr projectmaindetails cmbcountrymain_btn'

        },
        {
            ref:'cmbRegion',
            selector: 'projectmain projectmainHdr projectmaindetails cmbregion_btn'

        },
        {
            ref:'cmbCityMain',
            selector: 'projectmain projectmainHdr projectmaindetails cmbcitymain_btn'

        },
        {
            ref:'projectMainImages',
            selector: 'projectmain projectmainHdr projectmainImages image'
        },
        {
            ref:'projectMainDataView',
            selector: 'projectmain projectmainHdr #ProjectMainImages dataview'
        },
        {
            ref:'projectSubGrd',
            selector: 'projectmain projectmainHdr projectsubGrd gridpanel'
        }

    ],

    init: function() {
         var me=this;
         this.control(
            {
                "projectmain projectmainMap":{

                    mapready:function (x) {

                        x.gmap.addListener('click',function (event) {


                            if (event.placeId) {
                                me.clear(true);
                                console.log('You clicked on place:' + event.placeId);

                                event.stop();
                                console.log(event);
                                me.getPlaceInformation( x.gmap,event.placeId);
                            }

                        });

                    }
                },

                "projectmain projectmainHdr projectmainGrd gridpanel":{
                    render:this.onRenderProjectMainGrd
                },
                "projectmain projectmainHdr projectmainGrd gridpanel [itemId=bt_up]":{
                    click:this.onUpRecordProjectMainGrd
                },
                "projectmain projectmainHdr projectmainGrd gridpanel [itemId=bt_Del]":{
                    click:this.onDeleteRecordProjectMainGrd
                },

                "projectmain projectmainHdr projectmaindetails autocompletehotels[itemId=txtplace]":{
                    afterrender:function(x){
                               console.log('sssssssssssssssssssssssssssssssssssssssssss');
                                x.autocomplete.addListener('places_changed',
                                   function(){
                                       me.clear(false);
                                       me.GetPlaceSelect(this);
                                   }
                                );
                    }
                },
                "projectmain projectmainHdr projectmaindetails cmbcountrymain_btn":{
                    select:this.onChangeCountryMain
                },
                "projectmain projectmainHdr projectmaindetails cmbregion_btn":{
                    select:this.onChangeRegion
                },
                "projectmain projectmainHdr projectmaindetails cmbcitymain_btn":{
                    select:this.onChangeCityMain
                },
                "projectmain projectmainHdr projectmaindetails button#bt_save":{
                    click:this.onSaveProjectMainDetails
                },
                "projectmain projectmainHdr projectmaindetails button#bt_cancel":{
                    click:this.onCancelProjectMainDetails
                },



                "projectmain projectmainHdr projectmainImages filefield": {
                    change: this.onFilefieldChange
                },
                "projectmain projectmainHdr projectmainImages button#bt_save": {
                    click: this.onSaveProjectMainImages
                },



                "projectmain projectmainHdr projectmainfacilities button#bt_newFacilities":{
                    click:this.onNewFacilities
                },
                "projectmain projectmainHdr projectmainfacilities button#bt_save":{
                    click:this.onSaveProjectMainFacilities
                },
                "projectmain projectmainHdr projectmainfacilities ckbfacilties":{
                  //  render:this.onRenderFacilities
                },
                "projectmain projectmainHdr projectsubGrd gridpanel":{
                    //render:this.onRenderProjectSubGrd
                },
                "projectmain projectmainHdr projectsubGrd gridpanel [itemId=bt_Del]":{
                     click:this.onDeleteRecordProjectSubGrd
                }

         });
    },
    clear:function(flag){
         var header=this.getFrmMain();
         var lat_val=header.down('textfield[itemId=txtStartLat]');
         var long_val=header.down('textfield[itemId=txtStartLong]');
         var Onlineaddress=header.down("textfield[itemId=txtOnlineaddress]");
         lat_val.setValue('');
         long_val.setValue('');
         Onlineaddress.setValue('');
         if(flag==true){
           var autocompletehotels=  header.down('autocompletehotels[itemId=txtplace]');

             autocompletehotels.setValue('');
         }
     },
    GetPlaceSelect: function(place) {
         console.log(place);
                    var header=this.getFrmMain();

                    var map=this.getPupMap();

                var lat_val=header.down('textfield[itemId=txtStartLat]');
                var long_val=header.down('textfield[itemId=txtStartLong]');
               var Onlineaddress=header.down("textfield[itemId=txtOnlineaddress]");
        //         var placId=hedr.down("textfield[itemId=txtPlace_IdOnline]");
        //        var nameOnline=hedr.down("textfield[itemId=txtStartPointNameOnline]");
        //         var TypePlace=hedr.down("textfield[itemId=TypePlace]");



                var placeArr=place.getPlaces();

                 console.log(placeArr);
                Ext.each(placeArr,function(pl){
               // TypePlace.setValue(pl.types[0]);
                  //  console.log(pl.types[0]);
                   // console.log('Tamer');

                var address = [
                  (placeArr[0].address_components[0] && pl.address_components[0].short_name || ''),
                  (placeArr[0].address_components[1] && pl.address_components[1].short_name || ''),
                  (placeArr[0].address_components[2] && pl.address_components[2].short_name || '')
                ].join(' ');


                   console.log("address");
                   console.log(address);
                //    console.log(pl.geometry.location.lat());
                 //   console.log(pl.geometry.location.lng());
                    console.log(pl.name);

                    lat_val.setValue(pl.geometry.location.lat());
                    long_val.setValue(pl.geometry.location.lng());
        //             placId.setValue(pl.place_id) ;
        //             nameOnline.setValue(pl.name) ;
                    Onlineaddress.setValue(address);

                    map.setCenter({
                        geoCodeAddr: pl.name + ','+ address ,
                        marker: {
                            title: pl.name
                        }
                    });

                });
    },
    getPlaceInformation:function (map,placeId) {
        console.log('maplistener');
        var header=this.getFrmMain();
        var mapv=this.getPupMap();

        var lat_val=header.down('textfield[itemId=txtStartLat]');
        var long_val=header.down('textfield[itemId=txtStartLong]');
        var Onlineaddress=header.down("textfield[itemId=txtOnlineaddress]");
        var placesService = new google.maps.places.PlacesService(map);
        placesService.getDetails({placeId: placeId}, function(place, status) {
            if (status === 'OK') {
                console.log(place);
                lat_val.setValue(place.geometry.location.lat());
                long_val.setValue(place.geometry.location.lng());



                    // TypePlace.setValue(pl.types[0]);
                    //  console.log(pl.types[0]);
                    // console.log('Tamer');

                    var address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');

                Onlineaddress.setValue(address);
                mapv.setCenter({
                    geoCodeAddr: place.name + ','+ address ,
                    marker: {
                        title: place.name
                    }
                });

            }


        });
    },

    onRenderProjectMainGrd:function (component,options) {
      var store= component.getStore().load();
      console.log(store);
    },
    onUpRecordProjectMainGrd:function (view, rowIndex, colIndex, item, e, record) {
        var me=this;
        var pan=view.up('projectmainHdr');

        var Details=pan.down('panel#ProjectMainDetails');
        var Detailsfrm=Details.down('projectmaindetails');

        var Facilities=pan.down('panel#ProjectMainFacilities');
        var Facilitiesfrm=Facilities.down('projectmainfacilities');

        var Images=pan.down('panel#ProjectMainImages');
        var Imagesfrm=Images.down('projectmainImages');

        Detailsfrm.getForm().reset();
        Facilitiesfrm.getForm().reset();
        Imagesfrm.getForm().reset();
        //var cmbCity=me.getCmbCityMain();
        //
        //var me.mbRegion
        Detailsfrm.loadRecord(record);
        console.log(record.data.City_id,"Tamer Samir ");

      //  cmbCity.setValue(3);



        me.loadFacilities(Facilities,record.data.OpTypeLst,record.data.Project_TypeId);
        me.loadImages(Images,record.data.Project_Id);
        me.loadProjectSubGrd(Facilities,record.data.Project_Id);
        Facilities.setDisabled(false);
        Images.setDisabled(false);

    },
    onDeleteRecordProjectMainGrd:function (view, rowIndex, colIndex, item, e, record) {
        var grid = this.getProjectMainGrd();
        console.log(record);
        Ext.Msg.show({
            title: 'Save',
            msg: 'Do you want to Save the changes?',
            width: 300,
            closable: false,
            buttons: Ext.Msg.YESNOCANCEL,
            buttonText: {
                yes: 'Yes & Continue',
                no: 'No & Continue',
                cancel:'Discard'
            },
            multiline: false,
            fn: function(buttonValue, inputText, showConfig) {
                //  Ext.Msg.alert('Status', buttonValue);
                if(buttonValue=="yes"){
                    Ext.Msg.wait('executing..');
                    if (record.data.Active)
                    {
                        record.set("Active",false);
                    }else
                    {
                        record.set("Active",true);
                    }

                    grid.getStore().sync({
                        success:function(batch){
                            Ext.Msg.hide();
                            grid.getStore().load();
                        },
                        failure:function(batch){
                            Ext.Msg.alert("Failed", batch.operations[0]);
                            Ext.Msg.hide();
                        }
                    });

                }

            },
            icon: Ext.Msg.QUESTION
        });
    },



    onChangeCountryMain:function (component) {
             var cmbRegion=this.getCmbRegion();
             var cmbCityMain=this.getCmbCityMain();
        var newValue=component.value;
             console.log(component.value);

        if (newValue === null) {
        // console.log('dddddddddddddddd');
            component.reset();
            cmbRegion.reset();
            cmbCityMain.reset();
            cmbRegion.getStore().load({
                params:{
                    Country_Code:''
                }
            });
            cmbCityMain.getStore().load({
                params:{
                    Region_Id:-1
                }
            });
        }else{
            cmbRegion.reset();
            cmbCityMain.reset();
            cmbRegion.getStore().load({
                params:{
                    Country_Code:newValue
                }
            });
            cmbCityMain.getStore().load({
                params:{
                    Region_Id:-1
                }
            });
        }

    },
    onChangeRegion:function (component) {
         console.log('region');
        var cmbCityMain=this.getCmbCityMain();
        var newValue=component.value;
        if (newValue === null) {
            component.reset();
            cmbCityMain.reset();
            cmbCityMain.getStore().load({
                params:{
                    Region_Id:0
                }
            });
        }else{

           if(newValue>0){

               cmbCityMain.reset();
            cmbCityMain.getStore().load({
                params:{
                    Region_Id:newValue
                }
            });
        }}
    },
    onChangeCityMain:function (component) {
        var newValue=component.value;
        if (newValue === null) {

            component.reset();

        }
    },
    onSaveProjectMainDetails:function(button){
        var me=this;
        var grid=this.getProjectMainGrd();
        var pan=button.up('projectmainHdr');


        var Details=pan.down('panel#ProjectMainDetails');
        var frm=Details.down('projectmaindetails');

        var Facilities=pan.down('panel#ProjectMainFacilities');
        var Images=pan.down('panel#ProjectMainImages');

        var Project_TypeId=frm.down('cmbprojecttype_btn').getValue();

        Ext.Msg.wait('loading');
        if(frm.down('hiddenfield[itemId=Project_Id]').getValue()>0){

        }else{
            frm.down('hiddenfield[itemId=Project_Id]').setValue(0);
            frm.down('hiddenfield[itemId=Active]').setValue(false);
        }

        if(frm.getForm().isValid()){
            frm.getForm().submit({
                clientValidation: true,
                url: 'SettingMain/Project_Main_Insert',
                success: function(form, action) {

                    var result = action.result;
                    if (result.success) {

                        button.setText('save');
                      //  frm.getForm().reset();
                        frm.down('hiddenfield[itemId=Project_Id]').setValue(result.Project_Id);
                      var store= grid.getStore().load(
                          {
                              callback: function(records, operation, success) {

                                var filterBasedOnThisRecord = store.findRecord("Project_Id", result.Project_Id);


                                  me.loadFacilities(Facilities,filterBasedOnThisRecord.data.OpTypeLst,Project_TypeId);
                                  me.loadImages(Images,result.Project_Id);
                                  me.loadProjectSubGrd(Facilities,result.Project_Id);
                                  Facilities.setDisabled(false);
                                  Images.setDisabled(false);
                                  Ext.Msg.hide();

                              }
                          }
                      );

                    }

                },failure: function(form, action) {

                    Ext.Msg.hide();

                    switch (action.failureType) {
                        case Ext.form.action.Action.CLIENT_INVALID:
                            Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
                            break;
                        case Ext.form.action.Action.CONNECT_FAILURE:
                            Ext.Msg.alert('Failure', 'Communication failed');
                            break;
                        case Ext.form.action.Action.SERVER_INVALID:
                            Ext.Msg.alert('Failure', action.result.msg);
                    }

                }
            });
        }

    },
    onCancelProjectMainDetails:function (button) {
        var me=this;
        var pan=button.up('projectmainHdr');

        var Details=pan.down('panel#ProjectMainDetails');
        var Detailsfrm=Details.down('projectmaindetails');

        var Facilities=pan.down('panel#ProjectMainFacilities');
        var Facilitiesfrm=Facilities.down('projectmainfacilities');

        var Images=pan.down('panel#ProjectMainImages');
        var Imagesfrm=Images.down('projectmainImages');
        pan.setActiveTab(0);
        Detailsfrm.getForm().reset();
        Facilitiesfrm.getForm().reset();
        Imagesfrm.getForm().reset();
        me.loadFacilities(Facilities,[],0);
        me.loadImages(Images,0);
        me.loadProjectSubGrd(Facilities,0);
        Facilities.setDisabled(true);
        Images.setDisabled(true);

    },



    onFilefieldChange:function (filefield, value, options) {
        var file = filefield.fileInputEl.dom.files[0];
        console.log(file);
        var picture = this.getProjectMainImages();
        if (typeof FileReader !== "undefined" && (/image/i).test(file.type)) {
            var reader = new FileReader();
            reader.onload = function(e){
                console.log(e);
                picture.setSrc(e.target.result);
            };
            reader.readAsDataURL(file);
        } else if (!(/image/i).test(file.type)){
            Ext.Msg.alert('Warning', 'You can only upload image files!');
            filefield.reset();
        }
    },
    onSaveProjectMainImages:function (button) {
        console.log('dddddd');
        var frmMain=this.getFrmMain();
        var Project_IdM=frmMain.down('hiddenfield[itemId=Project_Id]').getValue();
        var projectMainDataView=this.getProjectMainDataView();

        var projectmainImagesfrm=button.up('projectmainImages');
        Ext.Msg.wait('loading');
        if(Project_IdM>0){
            projectmainImagesfrm.down('hiddenfield[itemId=Project_Id]').setValue(Project_IdM);
            if(projectmainImagesfrm.down('hiddenfield[itemId=Pj_Gallery_Id]').getValue()>0){

            }else {
                projectmainImagesfrm.down('hiddenfield[itemId=Pj_Gallery_Id]').setValue(0);
                projectmainImagesfrm.down('hiddenfield[itemId=Active]').setValue(false);
            }
            if(projectmainImagesfrm.getForm().isValid()){
                projectmainImagesfrm.getForm().submit({
                    clientValidation: true,
                    url: 'SettingMain/ProjectGallery_Insert',
                    success: function(form, action) {

                        var result = action.result;
                        if (result.success) {
                            Ext.Msg.hide();
                            button.setText('save');
                            projectmainImagesfrm.getForm().reset();
                            projectMainDataView.getStore().load({
                                params:{
                                    Project_Id:Project_IdM,
                                    Relation_Id:1
                                }
                            });
                        }

                    },failure: function(form, action) {

                        Ext.Msg.hide();

                        switch (action.failureType) {
                            case Ext.form.action.Action.CLIENT_INVALID:
                                Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
                                break;
                            case Ext.form.action.Action.CONNECT_FAILURE:
                                Ext.Msg.alert('Failure', 'Communication failed');
                                break;
                            case Ext.form.action.Action.SERVER_INVALID:
                                Ext.Msg.alert('Failure', action.result.msg);
                        }

                    }
                });
            }


        }


    },





    onRenderFacilities:function(component){
        console.log(component);
        var projectmainHdr=component.up('projectmainHdr');

        var Details=projectmainHdr.down('panel#ProjectMainDetails');
        var frm=Details.down('projectmaindetails');
        var Project_TypeId=frm.down('cmbprojecttype_btn').getValue();
        var checkboxgroup=component.down('checkboxgroup');
        checkboxgroup.setValue(false);
        component.checkboxArray=[];
        component.itemsTest(checkboxgroup,Project_TypeId)
    },
    onRenderProjectSubGrd:function(component){
        component.getStore().load({
            params:{
                Project_Id:0
            }
        })
    },
    onNewFacilities:function () {
        Ext.create('Ext.window.Window', {
            title: 'Facilities',
            height: 400,
            width: 900,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            listeners:{
                'close':function(win){
                    // var cmbdepartment= Ext.ComponentQuery.query('cmbdepartment_btn');
                    //
                    // Ext.each(cmbdepartment,function(c){
                    //     // console.log(c);
                    //     c.getStore().load();
                    // });
                }

            },
            modal: true,
            items: [Ext.create('widget.projecttypeoption')]
        }).show();
    },
    onSaveProjectMainFacilities:function (button) {
        var me=this;
        var maingrd=this.getProjectMainGrd();
        var frmMain=this.getFrmMain();


        var Project_IdM=frmMain.down('hiddenfield[itemId=Project_Id]').getValue();

        var Facilities=button.up('panel#ProjectMainFacilities');
        var projectmainfacilitiesfrm=Facilities.down('projectmainfacilities');
        var checkbox =projectmainfacilitiesfrm.down('ckbfacilties');
        var checkboxgroup=checkbox.down('checkboxgroup');
        var arr=checkbox.checkboxArray;
        Ext.Msg.wait('loading');
        if(Project_IdM>0){
            projectmainfacilitiesfrm.down('hiddenfield[itemId=Project_Id]').setValue(Project_IdM);

            if(projectmainfacilitiesfrm.getForm().isValid()){
                projectmainfacilitiesfrm.getForm().submit({
                    clientValidation: true,
                    url: 'SettingMain/ProjectOptions_Insert',
                    params: {

                        vic: arr
                    },
                    success: function(form, action) {

                        var result = action.result;
                        if (result.success) {

                            button.setText('save');
                            var store= maingrd.getStore().load( {callback: function(records, operation, success) {

                                var filterBasedOnThisRecord = store.findRecord("Project_Id", Project_IdM);
                                console.log(filterBasedOnThisRecord);
                                me.loadFacilities(Facilities,filterBasedOnThisRecord.data.OpTypeLst,filterBasedOnThisRecord.data.Project_TypeId);
                                me.loadProjectSubGrd(Facilities,Project_IdM);

                                Ext.Msg.hide();

                            }});


                        }

                    },failure: function(form, action) {

                        Ext.Msg.hide();

                        switch (action.failureType) {
                            case Ext.form.action.Action.CLIENT_INVALID:
                                Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
                                break;
                            case Ext.form.action.Action.CONNECT_FAILURE:
                                Ext.Msg.alert('Failure', 'Communication failed');
                                break;
                            case Ext.form.action.Action.SERVER_INVALID:
                                Ext.Msg.alert('Failure', action.result.msg);
                        }

                    }
                });
            }


        }


    },

    onDeleteRecordProjectSubGrd:function (view, rowIndex, colIndex, item, e, record) {
       var me=this;
        console.log(record.data.Project_Id);
        var Project_Id=record.data.Project_Id;
        var grid=this.getProjectSubGrd();

        var pan=grid.up('projectmainHdr');
        var Facilities=pan.down('panel#ProjectMainFacilities');
        var maingrd=this.getProjectMainGrd();
        Ext.Msg.show({
            title: 'Save',
            msg: 'Do you want to Save the changes?',
            width: 300,
            closable: false,
            buttons: Ext.Msg.YESNOCANCEL,
            buttonText: {
                yes: 'Yes & Continue',
                no: 'No & Continue',
                cancel:'Discard'
            },
            multiline: false,
            fn: function(buttonValue, inputText, showConfig) {
                //  Ext.Msg.alert('Status', buttonValue);
                if(buttonValue=="yes"){
                    Ext.Msg.wait('executing..');
                    grid.getStore().getProxy().setExtraParam(
                        'Active',true

                    );



                    grid.getStore().remove(record);
                    grid.getStore().suspendAutoSync();
                    grid.getStore().sync({
                        success: function (batch, options) {

                            console.log('success');
                            var store= maingrd.getStore().load( {callback: function(records, operation, success) {
                                console.log(store);
                                console.log(records);
                                var filterBasedOnThisRecord = store.findRecord("Project_Id", Project_Id);
                                console.log(filterBasedOnThisRecord);
                                me.loadFacilities(Facilities,filterBasedOnThisRecord.data.OpTypeLst,filterBasedOnThisRecord.data.Project_TypeId);
                                Ext.Msg.hide();

                            }});
                            grid.getStore().resumeAutoSync();

                        },
                        failure: function (batch, options){
                            console.log('failure');
                        }
                    });









                    //grid.getStore().getProxy().setParam('Active',true);
                    // grid.getStore().getProxy().setExtraParam(
                    //     'Active',true
                    //
                    // );
                    // grid.getStore().sync({
                    //     success:function(batch){
                    //         Ext.Msg.hide();
                    //       //  grid.getStore().load();
                    //     },
                    //     failure:function(batch){
                    //         Ext.Msg.alert("Failed", batch.operations[0]);
                    //         Ext.Msg.hide();
                    //     }
                    // });

                }

            },
            icon: Ext.Msg.QUESTION
        });
    },


    loadFacilities:function(component,OpTypeLst,Project_TypeId) {

        var vic=[];
        console.log(OpTypeLst);
        console.log(Project_TypeId);
        Ext.each(OpTypeLst, function(ob){
            Ext.Object.each(ob, function(property, value){
                console.log(property, value);
                vic.push(value);
            });
        });

        var ckbfacilties=component.down('ckbfacilties');
        var checkboxgroup=ckbfacilties.down('checkboxgroup');
        ckbfacilties.refresh();
        ckbfacilties.checkboxArray=vic;
        ckbfacilties.itemsTest(checkboxgroup,Project_TypeId)
    },
    loadImages:function(component,Project_Id){


        var dataview=component.down('dataview');
        dataview.getStore().load({
            params:{
                Project_Id:Project_Id,
                Relation_Id:1
            }
        })
    },
    loadProjectSubGrd:function (component,Project_Id ){
        var projectsubGrd=component.down('projectsubGrd');
        var grd=projectsubGrd.down('gridpanel');

      grd.getStore().load({
            params:{
                Project_Id:Project_Id
            }
        });


    }


});
